// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go
//
// Generated by this command:
//
//	mockgen -source=repo.go -destination=repo_mock.go -package=repo Repository
//

// Package repo is a generated GoMock package.
package repo

import (
	reflect "reflect"

	models "github.com/MosinFAM/subs-app/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateSubscription mocks base method.
func (m *MockRepository) CreateSubscription(s models.Subscription) (models.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", s)
	ret0, _ := ret[0].(models.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockRepositoryMockRecorder) CreateSubscription(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockRepository)(nil).CreateSubscription), s)
}

// DeleteSubscription mocks base method.
func (m *MockRepository) DeleteSubscription(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubscription", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubscription indicates an expected call of DeleteSubscription.
func (mr *MockRepositoryMockRecorder) DeleteSubscription(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubscription", reflect.TypeOf((*MockRepository)(nil).DeleteSubscription), id)
}

// GetSubscriptionByID mocks base method.
func (m *MockRepository) GetSubscriptionByID(id string) (models.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubscriptionByID", id)
	ret0, _ := ret[0].(models.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubscriptionByID indicates an expected call of GetSubscriptionByID.
func (mr *MockRepositoryMockRecorder) GetSubscriptionByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubscriptionByID", reflect.TypeOf((*MockRepository)(nil).GetSubscriptionByID), id)
}

// ListSubscriptions mocks base method.
func (m *MockRepository) ListSubscriptions(userID string) ([]models.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubscriptions", userID)
	ret0, _ := ret[0].([]models.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubscriptions indicates an expected call of ListSubscriptions.
func (mr *MockRepositoryMockRecorder) ListSubscriptions(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubscriptions", reflect.TypeOf((*MockRepository)(nil).ListSubscriptions), userID)
}

// SumSubscriptions mocks base method.
func (m *MockRepository) SumSubscriptions(filter models.SubscriptionSumRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SumSubscriptions", filter)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SumSubscriptions indicates an expected call of SumSubscriptions.
func (mr *MockRepositoryMockRecorder) SumSubscriptions(filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SumSubscriptions", reflect.TypeOf((*MockRepository)(nil).SumSubscriptions), filter)
}

// UpdateSubscription mocks base method.
func (m *MockRepository) UpdateSubscription(s models.Subscription) (models.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSubscription", s)
	ret0, _ := ret[0].(models.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSubscription indicates an expected call of UpdateSubscription.
func (mr *MockRepositoryMockRecorder) UpdateSubscription(s any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSubscription", reflect.TypeOf((*MockRepository)(nil).UpdateSubscription), s)
}
